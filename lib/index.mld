{0 suplex: a typed embedding of a C-like language in OCaml }

The library {b suplex} provides a typed eDSL to perform C-like programming
in OCaml, and run this code efficiently from OCaml. The goal is to provide
an easy-to-use execution target when metaprogramming.

{1 Example}

As an example, we show how to implement an iterative factorial.
{[
open Suplex
open LLvm_impl

let fact : int64 -> int64 =
    Exec.run
      Stack.(num I64_num @+ empty)
      Exec.(i64 @-> returning i64)
      (fun _self acc n ->
        let*! _ = store acc I64.one in
        let*! _ =
          for_
            ~init:(I64.v 1L)
            ~pred:(fun i -> I64.le i n)
            ~step:(fun i -> I64.add i (I64.v 1L))
            (fun i -> store acc (I64.mul (load acc) i))
        in
        load acc)
]}

Let's dissect that example, top-down. [Exec.run] reifies a {b suplex} program into a function callable from OCaml.
[Exec.run] takes three arguments.
- The first is a description of the stack frame, which here contains a single 64-bit signed integer.
- The second is the function prototype: here, it takes a single 64-bit signed integer and returns a value of the same type.
- The third is the body of the function. This function here takes the following arguments:
  - [_self] is the function being defined itself. This allows recursive calls (here we don't do any).
  - [acc] is a pointer to the data on the stack, here a single integer.
  - [n] is the function argument.

{1:api API}

{!modules: Suplex}
{!modules: Suplex.Llvm_impl}
{!modules: Suplex.Intf}